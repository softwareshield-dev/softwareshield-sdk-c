#include <catch2/catch.hpp>
#include <catch_ex.h>

#include <sdk-test-0/license_data.h>

#include <stdexcept>

#include <GS5.h>

using namespace gs;

namespace {
const char *tag = "[sdk-test-0]";

const char *productId = "b5e5cfab-3783-4358-a575-3520d1ef0f7b";
const char *password = "egsne_3111&IJGN&dcsvo&17332";

} // namespace

void test_callback(bool start) {
    auto core = TGSCore::getInstance();
    if (start) {
        bool ok = core->init(productId, sdk_test_0_lic_data_build_3, sizeof(sdk_test_0_lic_data_build_3), password);
        if (!ok) {
            char buf[2048];
            snprintf(buf, sizeof(buf), "license cannot be initialized, error-code: [%d] error-message: [%s]", core->lastErrorCode(), core->lastErrorMessage());
            throw std::runtime_error(buf);
        }
    } else {
        core->cleanUp();
    }
}

REGISTER_TEST_CALLBACK(test_callback);

TEST_CASE("entity-1", tag) {
    //entity params
    const std::time_t T0 = 1704096000;
    const std::time_t T1 = 1735718400;


    auto core = TGSCore::getInstance();
    std::unique_ptr<TGSEntity> e1{core->getEntityByIndex(0)};

    CHECK(e1->id() == std::string("a98b6275-b494-4cd9-bff5-4526aa0efd12"));

    //license
    SECTION("license") {
        CHECK(e1->hasLicense());

        std::unique_ptr<TGSLicense> lic(e1->getLicense());
        //license parameters
        CHECK(lic->id() == std::string("gs.lm.expire.hardDate.1"));

        CHECK(lic->getParamBool("timeBeginEnabled"));
        CHECK(lic->getParamUTCTime("timeBegin") == T0);
        CHECK(lic->getParamBool("timeEndEnabled"));
        CHECK(lic->getParamUTCTime("timeEnd") == T1);
        CHECK(lic->getParamInt("rollbackTolerance") == 4000);
        CHECK(lic->getParamBool("exitAppOnExpire"));
    }

    SECTION("offline activation") {
        //For unit-test purpose, the license does not use any fingerprint,
        //so the request code should be the same on different machines.
        std::string req_code = e1->getUnlockRequestCode();
        CHECK(req_code == "SRHAD-PGEB7-GWZ6Z-6QRL6");

        //license code generated by manual activator
        std::string lic_code = "5X5I-V5EM-PWZW-7IAW-H9K4";

        //WARN: in order to pass the following check, the license must be cleaned first 
        //via utility (sdk-main/license-projects/sdk-test-0/Release/KeyClean/win/gsClean) !!!
        std::time_t now = time(nullptr);
        CHECK(e1->isAccessible() == (now >= T0 && now < T1));

        CHECK(core->applyLicenseCode(lic_code.c_str()));
        CHECK(e1->isUnlocked());
    }
}